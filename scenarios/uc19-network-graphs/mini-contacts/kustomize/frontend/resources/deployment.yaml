---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: mini-contacts-frontend
  labels: { app: api }
  annotations:
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"mini-contacts-api:latest"},
        "fieldPath":"spec.template.spec.containers[?(@.name==\"api\")].image"}]
spec:
  replicas: 2
  selector:
    matchLabels: { app: api }
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels: { app: api }
    spec:
      containers:
        - name: api
          image: image-registry.openshift-image-registry.svc:5000/mini-contacts-frontend/mini-contacts-api:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          envFrom:
            - secretRef: { name: secret-db-api }
            - configMapRef: { name: api-config }
          readinessProbe:
            httpGet: { path: /healthz, port: http }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /healthz, port: http }
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests: { cpu: 50m, memory: 128Mi }
            limits:   { cpu: "1",  memory: 512Mi }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels: { app: frontend }
  annotations:
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"mini-contacts-frontend:latest"},
        "fieldPath":"spec.template.spec.containers[?(@.name==\"frontend\")].image"}]
spec:
  replicas: 2
  selector: { matchLabels: { app: frontend } }
  template:
    metadata: { labels: { app: frontend } }
    spec:
      containers:
        - name: frontend
          image: image-registry.openshift-image-registry.svc:5000/mini-contacts-frontend/mini-contacts-frontend:1.0
          imagePullPolicy: Always
          ports: [{ containerPort: 8080, name: http }]
          readinessProbe: { httpGet: { path: /healthz, port: http }, initialDelaySeconds: 5, periodSeconds: 5 }
          livenessProbe:  { httpGet: { path: /healthz, port: http }, initialDelaySeconds: 20, periodSeconds: 10 }
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits:   { cpu: "1",  memory: 256Mi }
