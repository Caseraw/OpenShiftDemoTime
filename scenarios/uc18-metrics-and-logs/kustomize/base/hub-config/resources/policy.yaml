---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-gitops
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install GitOps Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-gitops
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-gitops-operator
            namespace: openshift-gitops-operator
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-pipelines
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install OpenShift Pipelines Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-pipelines
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-pipelines-operator-rh
            namespace: openshift-operators
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-logging
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Installe the OpenShift Logging Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-logging
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-logging
            namespace: openshift-logging
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-loki
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install Loki Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-loki
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: loki-operator
            namespace: openshift-operators-redhat
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-coo
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install the Cluster Observability Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-coo
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-observability-operator
            namespace: openshift-cluster-observability-operator
            channel: stable
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-monitoring-enableuserworkload
  namespace: spoke-config
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: openshift-monitoring-enableuserworkload-v2
          namespace: openshift-monitoring
          labels:
            patcher: "true"
          annotations:
            policy.open-cluster-management.io/created-by: "openshift-monitoring-enableuserworkload"
        spec:
          backoffLimit: 0
          activeDeadlineSeconds: 120
          template:
            spec:
              serviceAccountName: openshift-monitoring-enableuserworkload
              restartPolicy: Never
              containers:
                - name: patch
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  command: ["/bin/bash","-ceu","--"]
                  args:
                    - |
                      set -euo pipefail
                      NS=openshift-monitoring
                      TARGET_CM=cluster-monitoring-config
                      FLAG_CM=openshift-monitoring-enableuserworkload-flag
                      NOW="$(date -u +%FT%TZ)"

                      # Read current config.yaml (may be empty)
                      CUR="$(oc -n "$NS" get cm "$TARGET_CM" -o jsonpath='{.data.config\.yaml}' 2>/dev/null || true || :)"
                      CUR="$(printf "%s" "${CUR:-}" | tr -d '\r')"

                      euw_ok() { printf "%s\n" "${CUR:-}" | grep -Eq '^[[:space:]]*enableUserWorkload[[:space:]]*:[[:space:]]*true([[:space:]]*($|#))'; }
                      am_ok() {
                        printf "%s\n" "${CUR:-}" \
                        | awk '
                            BEGIN{found=0; ok=0}
                            /^[[:space:]]*alertmanagerMain:[[:space:]]*$/ {found=1; next}
                            found && /^[^[:space:]]/ {found=0}
                            found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:[[:space:]]*true([[:space:]]*($|#))/ {ok=1}
                            END{exit ok?0:1}
                          '
                      }

                      EUW_OK=false; euw_ok && EUW_OK=true
                      AM_OK=false;  am_ok  && AM_OK=true

                      echo "Status: enableUserWorkload=$EUW_OK, alertmanagerMain.enableUserAlertmanagerConfig=$AM_OK"

                      # Only exit if BOTH are already true
                      if "$EUW_OK" && "$AM_OK"; then
                        echo "Both keys already set correctly. No changes."
                        oc -n "$NS" create cm "$FLAG_CM" \
                          --from-literal=last_ok="$NOW" >/dev/null 2>&1 || \
                        oc -n "$NS" patch cm "$FLAG_CM" --type=merge -p "{\"data\":{\"last_ok\":\"$NOW\"}}" >/dev/null 2>&1 || true
                        exit 0
                      fi

                      NEW_CONTENT="$CUR"

                      # Ensure enableUserWorkload: true (top-level)
                      if ! "$EUW_OK"; then
                        if printf "%s\n" "$NEW_CONTENT" | grep -qE '^[[:space:]]*enableUserWorkload[[:space:]]*:'; then
                          NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                            | awk 'BEGIN{done=0}
                                  /^[[:space:]]*enableUserWorkload[[:space:]]*:/ && done==0 { print "enableUserWorkload: true"; done=1; next }
                                  { print }')"
                        else
                          [ -n "$NEW_CONTENT" ] && [ "$(printf "%s" "$NEW_CONTENT" | tail -c1 || true | wc -c)" -ne 0 ] && NEW_CONTENT="$NEW_CONTENT"$'\n'
                          NEW_CONTENT="enableUserWorkload: true"$'\n'"$NEW_CONTENT"
                        fi
                      fi

                      # Ensure alertmanagerMain.enableUserAlertmanagerConfig: true
                      if ! "$AM_OK"; then
                        if printf "%s\n" "$NEW_CONTENT" | grep -qE '^[[:space:]]*alertmanagerMain:[[:space:]]*$'; then
                          if printf "%s\n" "$NEW_CONTENT" | awk '/^[[:space:]]*alertmanagerMain:/ {found=1; next} found && /^[^[:space:]]/{found=0} found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/ {exit 0} END{exit 1}'; then
                            NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                              | awk '/^[[:space:]]*alertmanagerMain:/ {print; found=1; next}
                                    found && /^[^[:space:]]/ {found=0}
                                    found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/ {print "  enableUserAlertmanagerConfig: true"; next}
                                    {print}')"
                          else
                            NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                              | awk '/^[[:space:]]*alertmanagerMain:/ {print; print "  enableUserAlertmanagerConfig: true"; next} {print}')"
                          fi
                        else
                          [ -n "$NEW_CONTENT" ] && [ "$(printf "%s" "$NEW_CONTENT" | tail -c1 || true | wc -c)" -ne 0 ] && NEW_CONTENT="$NEW_CONTENT"$'\n'
                          NEW_CONTENT="$NEW_CONTENT"$'alertmanagerMain:\n  enableUserAlertmanagerConfig: true\n'
                        fi
                      fi

                      # Apply updated CM with correct block-scalar indentation
                      TMP="$(mktemp)"
                      {
                        cat <<'EOF'
                      apiVersion: v1
                      kind: ConfigMap
                      metadata:
                        name: cluster-monitoring-config
                        namespace: openshift-monitoring
                      data:
                        config.yaml: |
                      EOF
                        printf "%s" "$NEW_CONTENT" | sed 's/^/    /'
                        echo
                      } > "$TMP"

                      echo "Applying updated ConfigMap..."
                      oc apply -f "$TMP"

                      oc -n "$NS" create cm "$FLAG_CM" \
                        --from-literal=last_update="$NOW" >/dev/null 2>&1 || \
                      oc -n "$NS" patch cm "$FLAG_CM" --type=merge -p "{\"data\":{\"last_update\":\"$NOW\"}}" >/dev/null 2>&1 || true
