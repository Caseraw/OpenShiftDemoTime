---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-gitops
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install GitOps Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-gitops
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-gitops-operator
            namespace: openshift-gitops-operator
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-pipelines
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install OpenShift Pipelines Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-pipelines
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-pipelines-operator-rh
            namespace: openshift-operators
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-logging
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Installe the OpenShift Logging Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-logging
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-logging
            namespace: openshift-logging
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-loki
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install Loki Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-loki
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: loki-operator
            namespace: openshift-operators-redhat
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-coo
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install the Cluster Observability Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-coo
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-observability-operator
            namespace: openshift-cluster-observability-operator
            channel: stable
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-monitoring-enableuserworkload
  namespace: acm-policies
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: openshift-monitoring-enableuserworkload
        spec:
          remediationAction: enforce
          object-templates:
            # ServiceAccount
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: openshift-monitoring-enableuserworkload
                  namespace: openshift-monitoring

            # Role
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: Role
                metadata:
                  name: openshift-monitoring-enableuserworkload
                  namespace: openshift-monitoring
                rules:
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["get","list","create","update","patch"]

            # RoleBinding
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: openshift-monitoring-enableuserworkload
                  namespace: openshift-monitoring
                subjects:
                  - kind: ServiceAccount
                    name: openshift-monitoring-enableuserworkload
                    namespace: openshift-monitoring
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: Role
                  name: openshift-monitoring-enableuserworkload

            # Job
            - complianceType: musthave
              objectDefinition:
                apiVersion: batch/v1
                kind: Job
                metadata:
                  name: openshift-monitoring-enableuserworkload
                  namespace: openshift-monitoring
                  labels:
                    patcher: "true"
                  annotations:
                    policy.open-cluster-management.io/created-by: "openshift-monitoring-enableuserworkload"
                spec:
                  backoffLimit: 0
                  activeDeadlineSeconds: 120
                  template:
                    spec:
                      serviceAccountName: openshift-monitoring-enableuserworkload
                      restartPolicy: Never
                      containers:
                        - name: patch
                          image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                          command: ["/bin/bash","-ceu","--"]
                          args:
                            - |
                              set -euo pipefail
                              NS=openshift-monitoring
                              TARGET_CM=cluster-monitoring-config
                              FLAG_CM=openshift-monitoring-enableuserworkload-flag
                              NOW="$(date -u +%FT%TZ)"

                              # Read current config.yaml (may be empty/missing)
                              CUR="$(oc -n "$NS" get cm "$TARGET_CM" -o jsonpath='{.data.config\.yaml}' 2>/dev/null || true || :)"
                              CUR="$(printf "%s" "${CUR:-}" | tr -d '\r')"

                              # --- enableUserWorkload ---
                              if printf "%s\n" "$CUR" | grep -Eq '^[[:space:]]*enableUserWorkload[[:space:]]*:[[:space:]]*true([[:space:]]*($|#))'; then
                                EUW_OK=true
                              else
                                EUW_OK=false
                              fi

                              # --- alertmanagerMain.enableUserAlertmanagerConfig ---
                              if printf "%s\n" "$CUR" | grep -qE '^[[:space:]]*alertmanagerMain:[[:space:]]*$' && \
                                 printf "%s\n" "$CUR" | awk '/^[[:space:]]*alertmanagerMain:/ {found=1; next} found && /^[^[:space:]]/{found=0} found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:[[:space:]]*true/{exit 0} END{exit 1}'; then
                                AM_OK=true
                              else
                                AM_OK=false
                              fi

                              # If both already OK â†’ exit
                              if [ "$EUW_OK" = true ] && [ "$AM_OK" = true ]; then
                                echo "Both keys already set correctly. No changes."
                                oc -n "$NS" create cm "$FLAG_CM" \
                                  --from-literal=last_ok="$NOW" >/dev/null 2>&1 || \
                                oc -n "$NS" patch cm "$FLAG_CM" --type=merge -p "{\"data\":{\"last_ok\":\"$NOW\"}}" >/dev/null 2>&1 || true
                                exit 0
                              fi

                              NEW_CONTENT="$CUR"

                              # Patch enableUserWorkload
                              if [ "$EUW_OK" = false ]; then
                                if printf "%s\n" "$NEW_CONTENT" | grep -qE '^[[:space:]]*enableUserWorkload[[:space:]]*:'; then
                                  NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                                    | awk 'BEGIN{done=0} /^[[:space:]]*enableUserWorkload[[:space:]]*:/ && done==0 { print "enableUserWorkload: true"; done=1; next } { print }')"
                                else
                                  [ -n "$NEW_CONTENT" ] && [ "$(printf "%s" "$NEW_CONTENT" | tail -c1)" != "" ] && NEW_CONTENT="$NEW_CONTENT"$'\n'
                                  NEW_CONTENT="enableUserWorkload: true"$'\n'"$NEW_CONTENT"
                                fi
                              fi

                              # Patch alertmanagerMain.enableUserAlertmanagerConfig
                              if [ "$AM_OK" = false ]; then
                                if printf "%s\n" "$NEW_CONTENT" | grep -qE '^[[:space:]]*alertmanagerMain:[[:space:]]*$'; then
                                  if printf "%s\n" "$NEW_CONTENT" | awk '/^[[:space:]]*alertmanagerMain:/ {found=1; next} found && /^[^[:space:]]/{found=0} found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/ {exit 0} END{exit 1}'; then
                                    NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                                      | awk '/^[[:space:]]*alertmanagerMain:/ {print; found=1; next} found && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/ {print "  enableUserAlertmanagerConfig: true"; found=0; next} {print}')"
                                  else
                                    NEW_CONTENT="$(printf "%s\n" "$NEW_CONTENT" \
                                      | awk '/^[[:space:]]*alertmanagerMain:/ {print; print "  enableUserAlertmanagerConfig: true"; next} {print}')"
                                  fi
                                else
                                  [ -n "$NEW_CONTENT" ] && [ "$(printf "%s" "$NEW_CONTENT" | tail -c1)" != "" ] && NEW_CONTENT="$NEW_CONTENT"$'\n'
                                  NEW_CONTENT="$NEW_CONTENT"$'alertmanagerMain:\n  enableUserAlertmanagerConfig: true\n'
                                fi
                              fi

                              # Write back with correct indentation for block scalar
                              TMP="$(mktemp)"
                              {
                                cat <<'EOF'
                              apiVersion: v1
                              kind: ConfigMap
                              metadata:
                                name: cluster-monitoring-config
                                namespace: openshift-monitoring
                              data:
                                config.yaml: |
                              EOF
                                printf "%s" "$NEW_CONTENT" | sed 's/^/    /'
                                echo
                              } > "$TMP"

                              echo "Applying updated ConfigMap..."
                              oc apply -f "$TMP"

                              # Record update time
                              oc -n "$NS" create cm "$FLAG_CM" \
                                --from-literal=last_update="$NOW" >/dev/null 2>&1 || \
                              oc -n "$NS" patch cm "$FLAG_CM" --type=merge -p "{\"data\":{\"last_update\":\"$NOW\"}}" >/dev/null 2>&1 || true
