---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-gitops
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install GitOps Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-gitops
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-gitops-operator
            namespace: openshift-gitops-operator
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-pipelines
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install OpenShift Pipelines Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-pipelines
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-pipelines-operator-rh
            namespace: openshift-operators
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-logging
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Installe the OpenShift Logging Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-logging
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-logging
            namespace: openshift-logging
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-loki
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install Loki Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-loki
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: loki-operator
            namespace: openshift-operators-redhat
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-coo
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install the Cluster Observability Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-coo
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-observability-operator
            namespace: openshift-cluster-observability-operator
            channel: stable
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-monitoring-enableuserworkload
  namespace: spoke-config
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: openshift-monitoring-enableuserworkload
          namespace: openshift-monitoring
        spec:
          backoffLimit: 0
          activeDeadlineSeconds: 180
          template:
            spec:
              # You may need RBAC if the default SA can't patch configmaps in this ns.
              # serviceAccountName: openshift-monitoring-enableuserworkload
              restartPolicy: Never
              containers:
                - name: patch
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  command: ["/bin/bash","-ceu","--"]
                  args:
                    - |
                      set -euo pipefail
                      NS=openshift-monitoring
                      CM=cluster-monitoring-config
                      KEY="config.yaml"

                      # Read current embedded YAML (may be empty/missing)
                      CUR="$(oc -n "$NS" get cm "$CM" -o jsonpath='{.data.config\.yaml}' 2>/dev/null || true || :)"
                      CUR="$(printf "%s" "${CUR:-}" | tr -d '\r')"

                      echo "==== BEFORE ===="
                      printf "%s\n" "${CUR:-<empty>}"
                      echo "================"

                      # --- helpers to detect current state ---
                      euw_ok() {
                        printf "%s\n" "${CUR:-}" | grep -Eq '^[[:space:]]*enableUserWorkload[[:space:]]*:[[:space:]]*true([[:space:]]*($|#))'
                      }
                      am_ok() {
                        printf "%s\n" "${CUR:-}" | awk '
                          BEGIN{insec=0; ok=0}
                          /^[[:space:]]*alertmanagerMain:[[:space:]]*$/ {insec=1; next}
                          insec && /^[^[:space:]]/ {insec=0}
                          insec && /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:[[:space:]]*true([[:space:]]*($|#))/ {ok=1}
                          END{exit ok?0:1}
                        '
                      }

                      EUW_OK=false; euw_ok && EUW_OK=true
                      AM_OK=false;  am_ok  && AM_OK=true
                      echo "Detected: enableUserWorkload=$EUW_OK, alertmanagerMain.enableUserAlertmanagerConfig=$AM_OK"

                      NEW="$CUR"

                      # --- ensure enableUserWorkload: true (top-level) ---
                      if ! "$EUW_OK"; then
                        if printf "%s\n" "$NEW" | grep -qE '^[[:space:]]*enableUserWorkload[[:space:]]*:'; then
                          NEW="$(printf "%s\n" "$NEW" \
                            | awk 'BEGIN{done=0}
                                  /^[[:space:]]*enableUserWorkload[[:space:]]*:/ && !done { print "enableUserWorkload: true"; done=1; next }
                                  { print }')"
                        else
                          # Append as a top-level key (ordering not important)
                          [ -n "$NEW" ] && [ "$(printf "%s" "$NEW" | tail -c1 || true | wc -c)" -ne 0 ] && NEW="$NEW"$'\n'
                          NEW="$NEW"$'enableUserWorkload: true\n'
                        fi
                      fi

                      # --- ensure alertmanagerMain.enableUserAlertmanagerConfig: true (nested) ---
                      if ! "$AM_OK"; then
                        if printf "%s\n" "$NEW" | grep -qE '^[[:space:]]*alertmanagerMain:[[:space:]]*$'; then
                          # Section exists: replace if key exists; otherwise insert under the header
                          NEW="$(printf "%s\n" "$NEW" | awk '
                            BEGIN{insec=0; replaced=0; inserted=0}
                            function insert_line(){ print "  enableUserAlertmanagerConfig: true"; inserted=1 }
                            /^[[:space:]]*alertmanagerMain:[[:space:]]*$/ { print; insec=1; next }
                            insec && /^[^[:space:]]/ {
                              if(!replaced && !inserted) insert_line();
                              insec=0
                            }
                            {
                              if(insec && $0 ~ /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/){
                                print "  enableUserAlertmanagerConfig: true"; replaced=1; next
                              }
                              print
                            }
                            END{
                              if(insec && !replaced && !inserted) insert_line()
                            }
                          ')"
                        else
                          # Section missing: append it at the end
                          [ -n "$NEW" ] && [ "$(printf "%s" "$NEW" | tail -c1 || true | wc -c)" -ne 0 ] && NEW="$NEW"$'\n'
                          NEW="$NEW"$'alertmanagerMain:\n  enableUserAlertmanagerConfig: true\n'
                        fi
                      fi

                      # No change? exit cleanly
                      if [ "${NEW:-}" = "${CUR:-}" ]; then
                        echo "No changes required."
                        exit 0
                      fi

                      echo "==== AFTER (to be applied) ===="
                      printf "%s\n" "$NEW"
                      echo "================================"

                      # Build a manifest with correct block-scalar indentation
                      TMP="$(mktemp)"
                      {
                        printf '%s\n' \
                          'apiVersion: v1' \
                          'kind: ConfigMap' \
                          'metadata:' \
                          '  name: cluster-monitoring-config' \
                          '  namespace: openshift-monitoring' \
                          'data:' \
                          '  config.yaml: |'
                        printf "%s" "$NEW" | sed 's/^/    /'
                        echo
                      } > "$TMP"

                      echo "Applying updated ConfigMap..."
                      oc apply -f "$TMP"

                      echo "Done."
