---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-gitops
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install GitOps Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-gitops
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-gitops-operator
            namespace: openshift-gitops-operator
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-pipelines
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install OpenShift Pipelines Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-pipelines
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: openshift-pipelines-operator-rh
            namespace: openshift-operators
            channel: latest
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-ocp-logging
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Installe the OpenShift Logging Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-ocp-logging
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-logging
            namespace: openshift-logging
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-loki
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install Loki Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-loki
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: loki-operator
            namespace: openshift-operators-redhat
            channel: stable-6.3
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: install-coo
  namespace: spoke-config
  annotations:
    policy.open-cluster-management.io/description: Install the Cluster Observability Operator
    policy.open-cluster-management.io/categories: ""
    policy.open-cluster-management.io/standards: ""
    policy.open-cluster-management.io/controls: ""
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1beta1
        kind: OperatorPolicy
        metadata:
          name: install-coo
        spec:
          remediationAction: enforce
          severity: high
          complianceType: musthave
          subscription:
            name: cluster-observability-operator
            namespace: openshift-cluster-observability-operator
            channel: stable
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          upgradeApproval: Automatic
          versions:
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: openshift-monitoring-enableuserworkload
  namespace: spoke-config
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: openshift-monitoring-enableuserworkload
          namespace: openshift-monitoring
        spec:
          backoffLimit: 0
          activeDeadlineSeconds: 180
          template:
            spec:
              serviceAccountName: openshift-monitoring-enableuserworkload
              restartPolicy: Never
              containers:
                - name: patch
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  command: ["/bin/bash","-ceu","--"]
                  args:
                    - |
                      set -euo pipefail
                      NS=openshift-monitoring
                      CM=cluster-monitoring-config

                      # If CM doesn't exist, create it with only what we need
                      if ! oc -n "$NS" get cm "$CM" >/dev/null 2>&1; then
                        echo "ConfigMap not found; creating minimal with required keys."
                        TMP="$(mktemp)"
                        {
                          printf '%s\n' \
                            'apiVersion: v1' \
                            'kind: ConfigMap' \
                            'metadata:' \
                            '  name: cluster-monitoring-config' \
                            '  namespace: openshift-monitoring' \
                            'data:' \
                            '  config.yaml: |' \
                            '    enableUserWorkload: true' \
                            '    alertmanagerMain:' \
                            '      enableUserAlertmanagerConfig: true'
                        } > "$TMP"
                        oc apply -f "$TMP"
                        echo "Done."
                        exit 0
                      fi

                      # Grab the existing embedded YAML (may be empty)
                      CUR="$(oc -n "$NS" get cm "$CM" -o jsonpath='{.data.config\.yaml}' 2>/dev/null || true || :)"
                      CUR="$(printf "%s" "${CUR:-}" | tr -d '\r')"

                      echo "==== BEFORE ===="
                      printf "%s\n" "${CUR:-<empty>}"
                      echo "================"

                      # 1) Remove any existing occurrences of the keys we manage
                      CLEAN="$(printf "%s\n" "${CUR}" | awk '
                        /^[[:space:]]*enableUserWorkload[[:space:]]*:/ {next}
                        /^[[:space:]]+enableUserAlertmanagerConfig[[:space:]]*:/ {next}
                        {print}
                      ')"

                      # 2) Ensure alertmanagerMain section exists, and insert the nested key
                      if printf "%s\n" "$CLEAN" | grep -qE '^[[:space:]]*alertmanagerMain:[[:space:]]*$'; then
                        NEW_AM="$(printf "%s\n" "$CLEAN" | awk '
                          /^[[:space:]]*alertmanagerMain:[[:space:]]*$/ {print; print "  enableUserAlertmanagerConfig: true"; next}
                          {print}
                        ')"
                      else
                        # Append section + key at end
                        NEW_AM="$CLEAN"
                        [ -n "$NEW_AM" ] && [ "$(printf "%s" "$NEW_AM" | tail -c1 || true | wc -c)" -ne 0 ] && NEW_AM="$NEW_AM"$'\n'
                        NEW_AM="$NEW_AM"$'alertmanagerMain:\n  enableUserAlertmanagerConfig: true\n'
                      fi

                      # 3) Prepend enableUserWorkload: true
                      NEW_FINAL="enableUserWorkload: true"$'\n'"$NEW_AM"

                      echo "==== AFTER (to be applied) ===="
                      printf "%s\n" "$NEW_FINAL"
                      echo "================================"

                      # 4) Build CM manifest and apply
                      TMP="$(mktemp)"
                      {
                        printf '%s\n' \
                          'apiVersion: v1' \
                          'kind: ConfigMap' \
                          'metadata:' \
                          '  name: cluster-monitoring-config' \
                          '  namespace: openshift-monitoring' \
                          'data:' \
                          '  config.yaml: |'
                        printf "%s" "$NEW_FINAL" | sed 's/^/    /'
                        echo
                      } > "$TMP"

                      echo "Applying updated ConfigMap..."
                      oc apply -f "$TMP"
                      echo "Done."
