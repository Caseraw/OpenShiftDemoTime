---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: demo-deploy-aws-cluster
spec:
  description: |
    Deploys a new OpenShift (or OCP Virtualization) cluster using AWS credentials and secrets from the 'aws' secret.
    All logic is run inline in the Tekton step. No workspace required.
  params:
    - description: "Cluster name ([a-z,0-9,-], e.g. 'aws-cluster-01')."
      name: CLUSTER_NAME
      type: string
    - description: |-
        AWS region. 
        Valid: 'us-east-2', 'ap-southeast-1', 'eu-central-1', 'eu-west-1'.
      name: AWS_REGION
      type: string
    - description: "Cluster type. 'ocp' for regular OpenShift, 'ocp-virt' for OCP Virtualization cluster."
      name: CLUSTER_TYPE
      type: string
    - description: |-
        Cluster sizing preset.
        Valid: 'ocp-sno', 'ocp-small', 'ocp-medium', 'ocp-large', 
               'ocp-virt-small', 'ocp-virt-medium', 'ocp-virt-large'
      name: CLUSTER_SIZE
      type: string
    - description: |-
        OpenShift release/version to deploy. Example: '4.19.3-multi'.
        Registry: https://quay.io/repository/openshift-release-dev/ocp-release?tab=tags
      name: CLUSTER_VERSION
      type: string
    - description: "Cluster Set name for ACM managed clusters. Example: 'default'."
      name: CLUSTER_SET
      type: string
  steps:
    - name: deploy-cluster
      image: registry.redhat.io/openshift4/ose-cli:latest
      volumeMounts:
        - name: aws-secret
          mountPath: /workspace/aws-creds
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        # --- Read all secrets from Tekton-injected files ---
        export AWS_ACCESS_KEY_ID=$(cat /workspace/aws-creds/aws_access_key_id)
        export AWS_SECRET_ACCESS_KEY=$(cat /workspace/aws-creds/aws_secret_access_key)
        export BASE_DOMAIN=$(cat /workspace/aws-creds/baseDomain)

        mapfile -t PULL_SECRET_LINES < "/workspace/aws-creds/pullSecret"
        mapfile -t SSH_PRIV_KEY_LINES < "/workspace/aws-creds/ssh-privatekey"
        mapfile -t SSH_PUB_KEY_LINES < "/workspace/aws-creds/ssh-publickey"
        PULL_SECRET=$(printf "%s\n" "${PULL_SECRET_LINES[@]}")
        SSH_PRIVATE_KEY=$(printf "%s\n" "${SSH_PRIV_KEY_LINES[@]}")
        SSH_PUBLIC_KEY=$(printf "%s\n" "${SSH_PUB_KEY_LINES[@]}")

        # --- Load parameters from Tekton params ---
        export CLUSTER_NAME="$(params.CLUSTER_NAME)"
        export AWS_REGION="$(params.AWS_REGION)"
        export CLUSTER_TYPE="$(params.CLUSTER_TYPE)"
        export CLUSTER_SIZE="$(params.CLUSTER_SIZE)"
        export CLUSTER_VERSION="$(params.CLUSTER_VERSION)"
        export CLUSTER_SET="$(params.CLUSTER_SET)"

        echo "Deploying ACM Managed Cluster on AWS: $CLUSTER_NAME"

        # YAML manifest creation (InstallConfig)
        INSTALL_CONFIG_YAML=$(cat <<EOF
        apiVersion: v1
        metadata:
          name: $CLUSTER_NAME
        baseDomain: $BASE_DOMAIN
        controlPlane:
          architecture: amd64
          hyperthreading: Enabled
          name: master
          replicas: 3
          platform:
            aws:
              rootVolume:
                iops: 4000
                size: 300
                type: io1
              type: m5.4xlarge
        compute:
        - hyperthreading: Enabled
          architecture: amd64
          name: worker
          replicas: 3
          platform:
            aws:
              rootVolume:
                iops: 2000
                size: 300
                type: io1
              type: m5d.metal
        networking:
          networkType: OVNKubernetes
          clusterNetwork:
          - cidr: 10.128.0.0/14
            hostPrefix: 23
          machineNetwork:
          - cidr: 10.0.0.0/16
          serviceNetwork:
          - 172.30.0.0/16
        platform:
          aws:
            region: $AWS_REGION
        pullSecret: "" # hive will inject
        sshKey: |-
            $SSH_PUBLIC_KEY
        EOF
        )
        INSTALL_CONFIG_YAML_B64=$(echo "$INSTALL_CONFIG_YAML" | base64 -w 0)

        # Apply manifest to create the namespace first
        oc apply -f - <<EOF
        # cat <<EOF
        kind: Namespace
        apiVersion: v1
        metadata:
          name:  $CLUSTER_NAME
          labels:
            # cluster.open-cluster-management.io/managedCluster:  $CLUSTER_NAME
            kubernetes.io/metadata.name:  $CLUSTER_NAME
            # open-cluster-management.io/cluster-name:  $CLUSTER_NAME
        EOF

        # --- Apply Kubernetes manifests as a single multi-document YAML ---
        oc apply -f - <<EOF
        # cat <<EOF
        ---
        apiVersion: hive.openshift.io/v1
        kind: ClusterDeployment
        metadata:
          name: $CLUSTER_NAME
          namespace: $CLUSTER_NAME
          labels:
            cloud: AWS
            region: $AWS_REGION
            vendor: OpenShift
            cluster.open-cluster-management.io/clusterset: $CLUSTER_SET
        spec:
          baseDomain: $BASE_DOMAIN
          clusterName: $CLUSTER_NAME
          controlPlaneConfig:
            servingCertificates: {}
          installAttemptsLimit: 1
          installed: false
          platform:
            aws:
              credentialsSecretRef:
                name: $CLUSTER_NAME-aws-creds
              region: $AWS_REGION
          provisioning:
            installConfigSecretRef:
              name: $CLUSTER_NAME-install-config
            sshPrivateKeySecretRef:
              name: $CLUSTER_NAME-ssh-private-key
            imageSetRef:
              name: $CLUSTER_VERSION
          pullSecretRef:
            name: $CLUSTER_NAME-pull-secret
        ---
        apiVersion: cluster.open-cluster-management.io/v1
        kind: ManagedCluster
        metadata:
          labels:
            cloud: Amazon
            region: $AWS_REGION
            name: $CLUSTER_NAME
            vendor: OpenShift
            cluster.open-cluster-management.io/clusterset: $CLUSTER_SET
            environment: dev
          name: $CLUSTER_NAME
        spec:
          hubAcceptsClient: true
        ---
        apiVersion: hive.openshift.io/v1
        kind: ClusterImageSet
        metadata:
          name: $CLUSTER_VERSION
          labels:
            visible: 'true'
        spec:
          releaseImage: quay.io/openshift-release-dev/ocp-release:$CLUSTER_VERSION
        ---
        apiVersion: hive.openshift.io/v1
        kind: MachinePool
        metadata:
          name: $CLUSTER_NAME-worker
          namespace: $CLUSTER_NAME
        spec:
          clusterDeploymentRef:
            name: $CLUSTER_NAME
          name: worker
          platform:
            aws:
              rootVolume:
                iops: 2000
                size: 300
                type: io1
              type: m5d.metal
          replicas: 3
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: $CLUSTER_NAME-pull-secret
          namespace: $CLUSTER_NAME
        stringData:
          .dockerconfigjson: |-
            $PULL_SECRET
        type: kubernetes.io/dockerconfigjson
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: $CLUSTER_NAME-install-config
          namespace: $CLUSTER_NAME
        type: Opaque
        data:
          install-config.yaml: $INSTALL_CONFIG_YAML_B64
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: $CLUSTER_NAME-ssh-private-key
          namespace: $CLUSTER_NAME
        stringData:
          ssh-privatekey: |-
        $(echo "$SSH_PRIVATE_KEY" | sed 's/^/    /')
        type: Opaque
        ---
        apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: $CLUSTER_NAME-aws-creds
          namespace: $CLUSTER_NAME
        stringData:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        ---
        apiVersion: agent.open-cluster-management.io/v1
        kind: KlusterletAddonConfig
        metadata:
          name: $CLUSTER_NAME
          namespace: $CLUSTER_NAME
        spec:
          clusterName: $CLUSTER_NAME
          clusterNamespace: $CLUSTER_NAME
          clusterLabels:
            cloud: Amazon
            vendor: OpenShift
          applicationManager:
            enabled: true
          policyController:
            enabled: true
          searchCollector:
            enabled: true
          certPolicyController:
            enabled: true
        EOF

        sleep 5
        echo "Done deploying ACM Managed Cluster on AWS: $CLUSTER_NAME"

  volumes:
    - name: aws-secret
      secret:
        secretName: aws
